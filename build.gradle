plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "0.12.0-SNAPSHOT"
    id "com.modrinth.minotaur" version "2.+" apply false
}

architectury {
    minecraft = rootProject.minecraft_version
    common(rootProject.enabled_platforms.split(","))
}

allprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version + "-" + project.minecraft_version
    group = rootProject.maven_group

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    repositories {
        maven {
            url 'https://maven.aliyun.com/nexus/content/groups/public'
        }
    }
    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings "net.fabricmc:yarn:${rootProject.yarn_mappings}:v2"
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 17
    }

    java {
        withSourcesJar()
    }
}
subprojects {
    apply plugin: "com.modrinth.minotaur"
}

loom {
    accessWidenerPath = file("src/main/resources/fabric-data-generation-api.accesswidener")
}
dependencies {
    // We depend on fabric loader here to use the fabric @Environment annotations and get the mixin dependencies
    // Do NOT use other classes from fabric loader
    modImplementation "net.fabricmc:fabric-loader:${rootProject.loader_version}"

    // 用于 Forge 的 event 部分
    modCompileOnly "net.minecraftforge:eventbus:6.0.3"
    modCompileOnly "net.minecraftforge:fmlcore:${project.minecraft_version}-${project.forge_version}"
}

publishing {
    publications {
        mavenCommon(MavenPublication) {
            artifactId = rootProject.archives_base_name
            from components.java
        }
    }
    repositories {
    }
}

task buildall {
    subprojects.forEach {
        dependsOn it.build
    }
}