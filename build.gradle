plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.4-SNAPSHOT"
    id "com.modrinth.minotaur" version "2.+" apply false
    id 'com.matthewprenger.cursegradle' version '1.4.0' apply false
    id "com.github.breadmoirai.github-release" version "2.5.2" apply false
}

architectury {
    minecraft = rootProject.minecraft_version
    common((rootProject.enabled_platforms as String).split(","))
}

allprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version + "-" + project.minecraft_version
    group = rootProject.maven_group

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    repositories {
    }
    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings "net.fabricmc:yarn:${rootProject.yarn_mappings}:v2"
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 17
    }

    java {
        withSourcesJar()
    }
}
base {
    archivesName = archivesName.get() + '-common'
}

subprojects {
    apply plugin: "com.modrinth.minotaur"
    apply plugin: 'com.matthewprenger.cursegradle'
    apply plugin: 'com.github.breadmoirai.github-release'
    apply plugin: "maven-publish"

    loom {
        runs {
            client {
                programArg "-username=Solid"
                runDir = '../run'
            }
            server {
                runDir = '../run'
            }
        }
    }

    publishing {
        repositories {
            maven {
                url = rootProject.file('../mvn-repo').path
            }
        }
    }

    String platform = project.properties.getOrDefault 'loom.platform', 'fabric'
    final String changelogContent = rootProject.file('changelog.md').text
    modrinth {
        println "Modrinth token: ${token.get()}"
        projectId = 'JnrDtPAE'
        versionNumber = "${rootProject.mod_version}-mc${rootProject.minecraft_version}-$platform"
        versionType = 'release'
        uploadFile = remapJar
        gameVersions = List.of(project.supported_minecraft_versions.split(","))
        loaders = [platform]
        changelog = changelogContent
        dependencies = platform.equals('fabric') ? [
                new ModDependency('P7dR8mSH', 'required') // Fabric API
        ] : []
    }

    curseforge {
        // The api key is store in my environment variable.
        def getenv = System.getenv("CURSEFORGE_TOKEN")
        println("CurseForge token: $getenv")
        if (getenv) apiKey = getenv
        project {
            id = '618156'
            changelog = changelogContent
            releaseType = 'release'

            gameVersionStrings.addAll project.supported_minecraft_versions.split(',')
            addGameVersion platform.capitalize()

            mainArtifact(remapJar) {
                it.displayName = "brrp-$platform-${rootProject.mod_version}-mc${rootProject.minecraft_version}"
            }
            relations {
                requiredDependency 'fabric-api'
            }
            afterEvaluate {
                mainArtifact remapJar
                uploadTask.dependsOn remapJar
            }
        }
        options {
            forgeGradleIntegration = false
        }
    }

    githubRelease {
        def getenv = System.getenv("GITHUB_TOKEN")
        println "GitHub token: $getenv"
        if (getenv) token getenv
        owner = "SolidBlock-cn"
        repo = "BRRP"
        tagName = "v$project.mod_version"
        targetCommitish = "1.20.2"
        body = changelogContent
        draft = true
        prerelease = false
        releaseAssets remapJar, remapSourcesJar
        allowUploadToExisting = true
        apiEndpoint = "https://api.github.com"
    }

    publish {
        dependsOn tasks.modrinth, tasks.curseforge, tasks.githubRelease, tasks.publishToMavenLocal
    }
}

loom {
    accessWidenerPath = file("src/main/resources/fabric-data-generation-api.accesswidener")

    mixin {
        defaultRefmapName = "brrp-v1-common-refmap.json"
    }
}
dependencies {
    // We depend on fabric loader here to use the fabric @Environment annotations and get the mixin dependencies
    // Do NOT use other classes from fabric loader
    modImplementation "net.fabricmc:fabric-loader:${rootProject.loader_version}"
}

publishing {
    publications {
        mavenCommon(MavenPublication) {
            artifactId = rootProject.archives_base_name
            from components.java
        }
    }
    repositories {
    }
}