import com.modrinth.minotaur.dependencies.ModDependency

plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":").loom.accessWidenerPath
}
base {
    archivesName = archivesName.get() + '-fabric'
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    maven { url "https://maven.terraformersmc.com/releases/" }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

    common(project(path: ":", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":", configuration: "transformProductionFabric")) { transitive false }

    modImplementation "com.terraformersmc:modmenu:${rootProject.mod_menu_version}"
}

processResources {
    // 确保这里的是模组版本（不含游戏版本）而不是项目版本
    inputs.property "version", rootProject.mod_version

    filesMatching("fabric.mod.json") {
        expand "version": rootProject.mod_version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = rootProject.sourcesJar
    dependsOn commonSources

    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
    }
}

modrinth {
    projectId = 'JnrDtPAE'
    versionNumber = "${rootProject.mod_version}-mc${rootProject.minecraft_version}-fabric"
    versionType = 'release'
    uploadFile = remapJar
    gameVersions = (project.supported_minecraft_versions as String).split(',') as List<String>
    loaders = ['fabric']
    dependencies = [
            new ModDependency('P7dR8mSH', 'required') // Fabric API
    ]
}


remapJar {
    // 将 remapJar 的结果放在主项目中
//    inputFile.set rootProject.buildDir.toPath().resolve(project.buildDir.relativePath(inputFile.asFile.get())).toFile()
    archiveFile.set rootProject.buildDir.toPath().resolve(project.buildDir.relativePath(archiveFile.asFile.get())).toFile()
}